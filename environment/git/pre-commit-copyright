#!/bin/bash

# git pre-commit hook that checks/updates the copyright block
# Features:
#  - Attempts to fix the copyright block in place
#  - abort commit when commit does not comply with the style guidelines

#--------------------------------------------------------------------------------------------------#
# SETTINGS
#
# - none
#--------------------------------------------------------------------------------------------------#

# make tmp file readable only by owner
umask 0077

debug=off
function debugprint()
{
  if [[ "$debug" == "on" ]]; then echo "==>" "$@"; fi
}

debugprint "running pre-commit-copyright"

# remove any older patches from previous commits. Set to true or false.
# DELETE_OLD_PATCHES=true

# file types to parse.
FILE_EXTS=".c .cc .cmake .h .hh .in .f90 .F90 .f .F .py .txt"
#FILE_ENDINGS_INCLUDE="_f.h _f77.h _f90.h"
FILE_ENDINGS_EXCLUDE="ChangeLog Release.cc"
export FILE_EXTS FILE_ENDINGS_EXCLUDE

##################################################################
# There should be no need to change anything below this line.
# shellcheck source=environment/git/canonicalize_filename.sh
source "$(dirname -- "$0")/canonicalize_filename.sh"

# shellcheck source=tools/common.sh
source "$(dirname -- "$0")/common.sh"

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Arguments
# - file
function rewrite_copyright_block()
{
  local filename=$1
  local gitfile=$2
  local today
  today=$(date +%Y)

  # This data was found in the header comments.  It might be a single year or a range.
  local crl
  crl=$(grep Copyright "${filename}")
  local create_date
  # shellcheck disable=SC2001
  create_date=$(echo "${crl}" | sed -e 's/.* \([0-9][0-9]*\).*/\1/')

  # These dates are reported by git
  local git_last_mod_date
  local git_create_date
  git_last_mod_date=$(git log -1 "${gitfile}" | grep Date | \
                        sed -e 's/.* \([0-9][0-9][0-9][0-9]\).*/\1/')
  git_create_date=$(git log "${gitfile}" | grep Date | tail -n 1 | \
                      sed -e 's/.* \([0-9][0-9][0-9][0-9]\).*/\1/')

  debugprint "$crl"
  debugprint "$create_date $git_last_mod_date $git_create_date"

  # Sanity Checks
  [[ "${create_date}" =~ "Copyright" ]] && die "Failed to parse copyright line"
  # [[ "${mod_date}" =~ "Copyright" ]] && die "Failed to parse copyright line"
  [[ "${git_last_mod_date}" =~ "Copyright" ]] && die "Failed to parse copyright line"
  [[ "${git_create_date}" =~ "Copyright" ]] && die "Failed to parse copyright line"
  if [[ "${create_date}" -gt "${today}" ]] || [[ "${create_date}" -lt "1990" ]]; then
    die "Existing copyright date range is corrupt. Please fix $filename manually."
  fi
  if [[ "${git_create_date}" -gt "${today}" ]] || [[ "${git_create_date}" -lt "1990" ]]; then
    die "Existing copyright date range is corrupt. Please fix $filename manually."
  fi
  if [[ "${create_date}" -gt "${today}" ]] || [[ "${create_date}" -lt "1990" ]]; then
    die "Existing copyright date range is corrupt. Please fix $filename manually."
  fi

  # We converted from CVS to svn in 2010. This is the oldest create date that git will report.  In
  # this case older data is lost, so just use whatever is in the file as the create date.
  [[ "${git_create_date}" == "2010" ]] && git_create_date="${create_date}"

  # Expected Copyright line:
  local ecrl="Copyright (C) ${git_create_date}-${today} Triad National Security, LLC., "
  ecrl+=" All rights reserved."
  debugprint "ecrl = $ecrl"

  # If existing copyright spans two lines, reduce it to one line.
  local twolines
  twolines=$(grep -A 1 Copyright "${filename}" | tail -n 1 | grep -c reserved)
  if [[ $twolines -gt 0 ]]; then
    sed -i 's/All rights reserved[.]*//' "${filename}"
  fi

  # Do we have terminating comement character on the 'copyright' line.  If so, keep it.
  local ecm=""
  if [[ $(echo "${crl}" | grep -c "\\\*/") -gt 0 ]]; then ecm=" */"; fi

  # Replace copyright with new one
  debugprint "sed -i s%Copyright.*%${ecrl}${ecm}% ${filename}"
  sed -i "s%Copyright.*%${ecrl}${ecm}%" "${filename}"
}

# create a random filename to store our generated patch
prefix="pre-commit-copyright"
suffix="$(date +%s)"

# clean up any older fprettify patches
# $DELETE_OLD_PATCHES && rm -f /tmp/$prefix-*. &> /dev/null
patchfile=$(mktemp "/tmp/$USER/${prefix}-${suffix}.patch.XXXXXXXX")

# create one patch containing all changes to the files
# shellcheck disable=SC2162
git diff-index --cached --diff-filter=ACMR --name-only $against -- | while read file;
do
  debugprint "should we process $file ?"

  # only process f90 files.
  if ! matches_extension "$file"; then continue; fi

  # If file is added to commit but still has local modifications, abort
  if [[ $(git diff "${file}" | wc -l) != 0 ]]; then
    echo -e "\nERROR: File ${file} has local edits that are not staged. Stash modifications or add "
    echo -e "       changes to this commit.\n\n"
    exit 1
  fi

  debugprint "Looking at $file"
  file_nameonly=$(basename "${file}")
  tmpfile1="/tmp/${prefix}-$file_nameonly"

  # Copy the file and attempt update it.
  cp "${file}" "${tmpfile1}"
  rewrite_copyright_block "$tmpfile1" "$file"
  debugprint "  updating patchfile"
  diff -u "${file}" "${tmpfile1}" | \
    sed -e "1s|--- |--- a/|" -e "2s|+++ ${tmpfile1}|+++ b/${file}|" >> "$patchfile"
  rm "${tmpfile1}"
done

# if no patch has been generated all is ok, clean up the file stub and exit
if ! [[ -s "$patchfile" ]]; then
  printf "Files in this commit comply with the expected copyright block rules.\n"
  rm -f "$patchfile"
  exit 0
fi

# If we get here, there are files that don't comply...

# If user wants to automatically apply these changes, then do it, otherwise, print the diffs and
# reject the commit.
if [[ -s "$patchfile" ]]; then
  git apply "$patchfile"
  printf "\nFiles in this commit were updated to comply with the copyright block rules.\n"
  printf "You must check and test these changes and then stage these updates to\n"
  printf "be part of your current change set and retry the commit.\n\n"
  git status
  rm -f "$patchfile"
  exit 1
fi

# ------------------------------------------------------------------------------------------------ #
# End pre-commit-copyright
# ------------------------------------------------------------------------------------------------ #
