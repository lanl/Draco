##-*- Mode: sh -*-
##---------------------------------------------------------------------------##
## .bashrc_ats2 - my bash configuration file upon bash login
##---------------------------------------------------------------------------##

if test -n "$verbose"; then
   echo "In draco/environment/bashrc/.bashrc_ats2"
fi

##---------------------------------------------------------------------------##
## ENVIRONMENTS
##---------------------------------------------------------------------------##

# unlimit stack and core dump sizes.
ulimit -s unlimited

# Where is the vendor directory
export PATH=${VENDOR_DIR:=/usr/gapps/jayenne/vendors}/bin:$PATH
export VENDOR_DIR
export JSM_JSRUN_NO_WARN_OVERSUBSCRIBE=1

# Support building cassio with ccsrad shared deployment repository.
if [[ -d /usr/workspace/dacodes/eap/users/ccsrad/Cassio.deployment ]]; then
  export TF_DEPLOYMENT_CLONES=/usr/workspace/dacodes/eap/users/ccsrad/eap.deployment
  export TF_SPACK_INSTANCES=/usr/workspace/dacodes/eap/users/ccsrad/spack_instances
fi

#
# MODULES
#

# 1. Determine if the module command is available
modcmd=`declare -f module`
# If not found, look for it in /usr/share/Modules (ML)
if [[ ! ${modcmd} ]]; then
  source /usr/share/lmod/lmod/init/bash || die "ERROR: The module command was not found. No modules will be loaded."
fi
modcmd=`declare -f module`

# 2. Use modules found in the draco directory
if [[ ! ${modcmd} ]]; then
  echo "ERROR: The module command was not found. No modules will be loaded."
else

  module use /usr/gapps/user_contrib/spack.20200402/share/spack/lmod/linux-rhel7-ppc64le/Core
  module use --append /usr/gapps/jayenne/Modules

  module unuse /usr/share/lmod/lmod/modulefiles/Core
  module unuse /collab/usr/global/tools/modulefiles/blueos_3_ppc64le_ib_p9/Core
  module load draco/xl2020.08.19-cuda-11.0.2

fi

# function dracoenv()
# {
#   module --force purge
#   module load StdEnv
#   module unload spectrum-mpi xl cuda
#   for m in $dracomodules; do
#     module load $m
#   done
#   unset MPI_ROOT
#   export CXX=`which g++`
#   export CC=`which gcc`
#   export FC=`which gfortran`
#   export MPIRUN="lrun"
#   export OMP_NUM_THREADS=10
# }

# function rmdracoenv()
# {
#   unset MPIRUN
#   unset FC
#   unset CC
#   unset CXX

#   # unload in reverse order.
#   mods=( ${dracomodules} )
#   for ((i=${#mods[@]}-1; i>=0; i--)); do
#     module unload ${mods[$i]}
#   done
# }

# Do not escape $ for bash completion
shopt -s direxpand

##---------------------------------------------------------------------------##
## end of .bashrc_ats2
##---------------------------------------------------------------------------##
