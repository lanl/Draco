2005-12-15  Kelly Thompson  <kgt@lanl.gov>

	* C4_Functions.hh (rtt_c4): Added a new function, isScalar() to
	  the rtt_c4 namespace.  This function returns true if MPI is
	  unavailable.  This modification should have no effect on
	  existing use of c4.

2005-11-03  Kelly Thompson  <kgt@lanl.gov>

	* tstC4_Req.cc: This new unit test checks the copy constructor for
	    C4_Req and its equality and inequality operators.  It also
	    checks the values associated with some of traits data
	    members.

	* tstScalar.cc: This new unit test checks the functionality of
	    many functions defined in C4_Serial.cc.  Most of these
	    functions don't actually do anything -- but we should ensure
	    that the scalar interfaces do not change.  This unit test
	    checks the functions probeResult, broadcast, send, receive,
	    receive_async, send_async and member functions of C4_Req.

	* tstTime.cc (wall_clock_test):
	  - Add tests for deprecated functions C4::Wtick() and
	    C4::Wtime().
	  - Add a test for
	    ostream& operator<<( ostream &out, const Timer &t ).
	  - Modify main() to ensure that rtt_c4::release() is called
	    during the nightly regression tests.

	* tstReduction.cc (array_reduction): Add tests for deprecated
	    functions C4::gsum, C4::gprod, C4::gmin and C4::gmax.

	* tstReduction.cc (elemental_reduction): Add tests for deprecated
	    functions C4::gsum, C4::gprod, C4::gmin and C4::gmax.

	* tstBroadcast.cc (test_simple): Add test for the iterator form of
	  broadcast.

	* tstPingPong.cc (blocking_ping_pong):
	  - Replace one use of rtt_c4::send with deprecated C4::Send.
	  - Replace one use of rtt_c4::receive with deprecated C4::Recv.
	  - These changes ensure that we test the deprecated C4 functions
	    that some older packages may still be using.

	* tstPingPong.cc (non_blocking_ping_pong):
	  - Replace one use of rtt_c4::receive_async with C4::RecvAsync.
	  - Replace one use of rtt_c4::send_async with C4::SendAsync.
	  - These changes ensure that we test the deprecated C4 functions
	    that some older packages may still be using.
	  - Replace one use void receive_async( C4_Req, T*, int, int )
	    with form that returns a C4_Req.
	  - Replace one use void send_async( C4_Req, T* int, int ) with
	    form that returns a C4_Req.
	  - These two changes ensure that we unit test both forms of
	    asynchronous send and receive.

	* tstPingPong.cc (tstC4_Req_free): Provide a new unit test for the
	    free() member function of class C4_Req.

	* global.hh (Send/Recv): Commented out two deprecated commands
	  because the compiler cannot distinguish the "T" template form
	  from the "const * T" form.  These commands are deprecated --
	  developers should use the rtt_c4::send and rtt_c4::receive
	  commands instead.

	* configure.ac (AC_RUNTESTS):  Two new unit tests added, tstC4_Req
	  and tstScalar.  Recent changes to c4 and c4 unit tests now
	  provide 95% function point coverage by nightly regression tests.

	* Sync.hh (HTSync):  Class definition commented out because it is
	  not used.  Instead, the c4 package uses TSync plus HSync.

	* ParallelUtils.hh (broadcast): Function removed from namespace
	  C4.  It is now available in namespace rtt_c4 (and defined in
	  C4_MPI.cc).

	* C4_Serial.hh (receive): Modify the return value to always be
	  C4_SUCCESS instead of 0.  This change is consistent mades the
	  return value consistent with other C4_Serial return values.

	* C4_Serial.hh (broadcast): Provide a scalar implementation for
	  the new iterator based broadcast function.  For the scalar case,
	  the function body is empty because the broadcast function does
	  not copy data from processor 0 to processor 0.  This is the same
	  behavior that is exhibited by the iterator based broadcast
	  function found in C4_MPI.hh when nodes()==1.

	* C4_Req.hh (==): Add equivalence operator for class C4_Req.  This
	  operator is useful because C4_Req has a copy constructor.

	* C4_Req.hh (!=): Add inequivalence operator for class C4_Req.
	  This operator is useful because C4_Req has a copy constructor.

	* C4_Req.hh (clear): Remove this function from the class
	  definition because it is never used and because it is a private
	  member function.

	* C4_Req.hh (s): Remove this function from the class definition
	  because it is never used and because it is a private member
	  function.

	* C4_MPI.cc (abort): Add a comment detailing why unit tests cannot
	  be automated to show that this function is covered.

	* C4_Serial.cc (abort): Add a comment detailing why unit tests
	  cannot be automated to show that this function is covered.

	* C4_Functions.hh (broadcast): Add a new broadcast function that
	  uses iterators.

	* C4_MPI.hh (broadcast): Add a new broadcast function that
	  uses iterators.


2005-06-02  Thomas M. Evans  <tme@lanl.gov>

	* C4_Functions.hh, C4_MPI.cc: Added abort() function.

2005-02-18  Kelly Thompson  <kgt@lanl.gov>

	* C4_MPI.cc (initialize): During initialize() make a call to
	MPI_Wtick().  This synchronizes the clocks for Darwin's version of
	mpich. It is not clear why this is required by Darwin's version of
	mpich, but we have demonstrated that it is necessary for Darwin's
	implementation. Thanks to Paul H. for figuring this one out.

2005-01-31  Kelly Thompson  <kgt@lanl.gov>

	* test/tstTime.cc: Changed order of include directives; Moved
	using statements into function scope and away from file scope;
	Added more tests to improve coverage percentage; Replaced old
	style C4:: scoping with new style "rtt_c4::".

	* Timer.hh (reset): Also reset the values for begin, end, timer_on
	and num_intervals.

	* Timer.cc (Timer): Provide new data member
	int:posix_clock_ticks_per_second; Add new data member
	bool:isMPIWtimeAvailable; Remove data member
	component_times_available since it is not needed under the new
	design; Modify the print() function so that it prints units
	(seconds) along with values; Modify the print() member function so
	that it always prints USER and SYSTEM time (posix values); Remove
	the member function set_cta() since it is no longer needed.

	* C4_MPI.cc (wall_clock_time): Add overloaded function definition
	that will return the MPI_Wtime() data along with posix timer data
	via agument reference to a tms struct.  Allows MPI programs to
	examine both MPI times and posix times.

2005-01-25  Kelly Thompson  <kgt@lanl.gov>

	* Timer.hh (class Timer): Significant modification to Timer
	class.  The Timer class will use MPI_Wtime when it is available.
	Otherwise, it will use posix timers.
	 - clock_t data members are now	doubles.
	 - new data member "bool system_time_available" is set to true if
	   we are using posix timers.
	 - Added virtual destructor to allow users to inherit from this
	   class.
	 - Disallow copy construction.
	 - Utilize rtt_c4::wall_clock_time and rtt_c4:: when possible.
	 - More thorough initializer in the default constructor.
	 - Only print User and System times when using posix timers.

	* C4_Functions.hh, C4_MPI.cc, C4_Serial.cc: added overloaded
	version of wall_clock_time.  This new function takes a reference
	to a tms struct so that additional information can be provided to
	the calling routine.

2004-11-17  Rob Lowrie  <lowrie@lanl.gov>

	* c4: Added broadcast().

2003-04-22  Kent Budge  <kgbudge@tresosos.lanl.gov>

	* C4_MPI.cc: Added a probe function to increase support for
	asynchronous message passing.

2003-04-18  Kent Budge  <kgbudge@tresosos.lanl.gov>

	* ParallelUtils.hh: Added typename keywords to remove warnings;
	simplified broadcast interface

2003-03-13  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to version 2_3_0.  This has some improvements made
	by lowrie to the Timer class.

2002-11-14  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to version 2_2_0.  This change added flags to
	config.h for the Compaq ALASKA MPI release.

2002-08-14  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to version 2_1_0.  This change added full support
	for duplicating and freeing communicators.

2002-05-08  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to version 2_0_0.  This release encompasses the
	changes from 25-MAR-02.  C4 is now in a state where we can begin
	to add new functionality (UPS, Gather/Scatters, etc ). This
	release has basic testing, but could use more.  Additionally, it
	still supports old C4 namespace backwards-compatibility.  However,
	nothing new will be added to this namespace.

2002-03-25  Thomas M. Evans  <tme@lanl.gov>

	* c4: massive changes.  Removed support for nx and shmem.  Added
	all services to the rtt_c4 namespace (C4 namespace is preserved in
	global.hh for backwards compatibility).  This first major series
	of changes preserves the same capabilities as before--albeit with
	different names.  c4 can be implemented serially and on mpi.  UPS
	should be easy to add now.  For those of you who want to work in
	the old C4 namespace, checkout c4-1_6_0.  No new functions will be
	added to the C4 namespace.  All new stuff is to be added to
	rtt_c4.  For the time-being, the C4 namespace will be preserved
	for a transition period.

	To summarize, you don't have to do anything just now; however, you
	should think about migrating to rtt_c4 namespace (the function
	names have changed as well).  The old C4 namespace, with the old
	function declarations, is still preserved in global.hh.

2001-12-17  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to c4-1_6_0.  The only change in this release is
	that configure is no longer part of the package.

2001-07-30  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to c4-1_5_0.  This release adds the ParallelUtils
	component.  It also adds type long to the mpi_traits list.  Some
	antiquated files are removed.

2000-12-14  Thomas M. Evans  <tme@lanl.gov>

	* c4: Updated to c4-1_4_0.  This release is primarily due to
	R. Roberts enhancements to (C4_Req). These enhancements were
	performed on 3-JUN-00.  They added full reference counting to the
	(C4_Req) class.

2000-04-18  Thomas M. Evans  <tme@lanl.gov>

	* c4: update to release c4-1_3_0.  This release removed all
	deprecated dejagnu references.

2000-02-09  Thomas M. Evans  <tme@lanl.gov>

	* ., test: updated release to c4-1_2_0.  This updates c4 to the
	new ds++ namespace.  We will modernize the c4 namespace at a later
	date when we work on c4 next.
