#!/bin/bash -l
##---------------------------------------------------------------------------##
## File  : regression/ccscs-regression.sh
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016-2017, Los Alamos National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${subproj} ]]; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if [[ ! ${regdir} ]]; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if [[ ! ${rscriptdir} ]]; then
   echo "Fatal Error, rscriptdir not found in environment."
   exit 1
fi
if [[ ! ${build_type} ]]; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi
if [[ ! ${logdir} ]]; then
   echo "Fatal Error, logdir not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
# ctest submit seems to ignore these no proxy settings, so we must unset the
# above proxy env variables before submitting the results to cdash.
export no_proxy="localhost,127.0.0.1,rtt.lanl.gov,.lanl.gov"
export NO_PROXY=$no_proxy
export VENDOR_DIR=/usr/projects/draco/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

# import some bash functions
source $rscriptdir/scripts/common.sh

case $REGRESSION_PHASE in
c) ctestparts=Configure;;
bt) ctestparts=Build,Test;;
s)
    ctestparts=Submit
    # Submitting to CDash requires this
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    ;;
esac

# Header
# ----------------------------------------
machine=`uname -n`
echo "==========================================================================="
echo "Moonlight regression: ${ctestparts} from ${machine}."
echo "                      ${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}"
echo "==========================================================================="

run "ulimit -a"

# Modules
# ----------------------------------------
if [[ `fn_exists module` == 0 ]]; then
    echo 'module function does not exist. defining a local function ...'
    run "source /usr/share/Modules/init/bash"
fi

# Clear any loaded modules as these are invalid when staring a new shell.
run "module purge &> /dev/null"
unset _LMFILES_
run "module list"
run "module load user_contrib"
run "module load friendly-testing"
run "module load cmake/3.6.2"
run "module load intel/17.0.1"
run "module load openmpi/1.10.5"
run "module load mkl"
run "module load trilinos/12.8.1"
run "module load superlu-dist"
run "module load metis"
run "module load parmetis"
run "module load ndi"
run "module load numdiff"
run "module load subversion git"
run "module load random123"
run "module load eospac/6.2.4"
run "module load grace"
comp=`basename $CXX`
export OMP_NUM_THREADS=8

if test "${comp}" == "icpc"; then
  comp="intel"
fi

case $extra_params in
"")
    # no-op
    ;;
cuda)
    echo "ERROR: CUDA is no longer supported."
    echo "Draco requires openmpi-1.10.5, which only provided for Intel/16+."
    echo "The cudatoolkit is only compatible with Intel < 16."
    exit 1
#     run "module unload eospac ndi parmetis metis"
#     run "module unload superlu-dist trilinos"
#     run "module unload mkl openmpi intel"
#     run "module list"
#     run "module load intel/16.0.3 openmpi/1.10.5"
# # cudatoolkits/5 - 7.5 are incompatible with intel/16.
# #    run "module load intel/16.0.3 openmpi/1.10.1"
#     run "module load mkl trilinos/12.6.1 superlu-dist metis"
#     run "module load parmetis ndi"
#     run "module load numdiff subversion git"
#     run "module load random123 eospac/6.2.4 grace"
#     run "module load cudatoolkit/7.5"
#     comp="${comp}-cuda"
    ;;
fulldiagnostics)
    comp="${comp}-fulldiagnostics"
    ;;
nr)
    comp="${comp}-nr"
    ;;
perfbench)
    comp="${comp}-perfbench"
    ;;
pgi)
    run "module list"
    # echo "LOADEDMODULES = $LOADEDMODULES"
    # echo "_LMFILES_ = ${_LMFILES_}"
    run "module unload eospac ndi parmetis metis"
    run "module unload superlu-dist trilinos"
    run "module unload mkl openmpi intel"
    run "module list"
    run "module load pgi/16.4 openmpi/1.10.5"
    export TMPDIR=/usr/projects/jayenne/regress/tmp
    comp="pgCC"
    CXX=`which pgCC`
    CC=`which pgcc`
    FC=`which pgf90`
    ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system (edit ml-regress.msub)."
    exit 1
    ;;
esac
run "module list"

# Use a unique regression folder for each github branch
comp=$comp-$featurebranch

# When run by crontab, use a special ssh-key to allow authentication to gitlab
if [[ ${regress_mode} == "on" ]]; then
  run "module load git"
  MYHOSTNAME="`uname -n`"
  keychain=keychain-2.7.1
  $VENDOR_DIR/$keychain/keychain $HOME/.ssh/cmake_dsa $HOME/.ssh/cmake_rsa
  if test -f $HOME/.keychain/$MYHOSTNAME-sh; then
    run "source $HOME/.keychain/$MYHOSTNAME-sh"
  else
    echo "Error: could not find $HOME/.keychain/$MYHOSTNAME-sh"
  fi
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug

if [[ ! ${dashboard_type} ]]; then
   dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
   if ! test -d ${scratchdir}; then
      echo "FATAL ERROR, scratchdir=${scratchdir} not found."
      echo "  Have the names/locations of scratch space changed?"
      exit 1
   fi
   scratchdir=$scratchdir/$LOGNAME/cdash/ml
   base_dir=$regdir/cdash/ml
fi

echo " "
echo "ml-regress.msub: dashboard_type = $dashboard_type"
echo "ml-regress.msub: base_dir       = $base_dir"
echo "ml-regress.msub: build_type     = $build_type"
echo "ml-regress.msub: comp           = $comp"
echo "ml-regress.msub: machine        = $machine"
echo "ml-regress.msub: subproj        = $subproj"
echo "ml-regress.msub: regdir         = $regdir"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${rscriptdir}
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=`echo ${rscriptdir} | sed -e 's/draco/jayenne/'`
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%capsaicin/scripts%'`
    script_name=Capsaicin_Linux64.cmake
fi

if ! [[ "${regress_mode}" == "on" ]]; then
  export buildname_append="-${USER}"
fi

# work_dir and scratch_dir are not the same for regress_mode == on.
export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
export scratch_dir=${scratchdir}/${subproj}/${dashboard_type}_${comp}/${build_type}
if ! [[ -d $scratch_dir ]]; then
  run "mkdir -p $scratch_dir" || die "unable to access scratch_dir = $scratch_dir"
fi
if ! [[ -d $work_dir ]]; then
  run "mkdir -p $work_dir" || die "unable to access work_dir = $work_dir"
fi

echo "ml-regress.msub: work_dir       = ${work_dir}"
echo "ml-regress.msub: scratch_dir    = ${scratch_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then

   if ! test -d ${work_dir}/source; then
      run "mkdir -p ${work_dir}/source"
   fi

   # See notes above where scratch_dir is set concerning why these are soft
   # links.
   if [[ "${regress_mode}" == "on" ]]; then
     if ! [[ -d ${scratch_dir}/build ]]; then
       run "mkdir -p ${scratch_dir}/build"
     fi
     if [[ -L ${work_dir}/build ]]; then
       rm ${work_dir}/build
     elif [[ -d ${work_dir}/build ]]; then
       rm -rf ${work_dir}/build
     fi
     run "ln -s ${scratch_dir}/build ${work_dir}/build"

     if ! [[ -d ${scratch_dir}/target ]]; then
       run "mkdir -p ${scratch_dir}/target"
     fi
     if [[ -L ${work_dir}/target ]]; then
       rm ${work_dir}/target
     elif [[ -d ${work_dir}/target ]]; then
       rm -rf ${work_dir}/target
     fi
     run "ln -s ${scratch_dir}/target ${work_dir}/target"

   else

     if ! [[ -d ${work_dir}/build ]]; then
       run "mkdir -p ${work_dir}/build"
     fi
     if ! [[ -d ${work_dir}/target ]]; then
       run "mkdir -p ${work_dir}/target"
     fi
   fi

   # clean the installation directory to remove any files that might no longer
   # be generated.
   if [[ -d ${work_dir}/target/lib ]]; then
       run "rm -rf ${work_dir}/target/*"
   fi
   if [[ -f ${work_dir}/build/CMakeCache.txt ]]; then
       run "rm -rf ${work_dir}/build/*"
   fi
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

date
echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
echo " "
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

if [[ ${regress_mode} == "on" ]]; then
  echo " "
  run "chgrp -R draco ${work_dir}"
  run "chmod -R g+rwX,o-rwX ${work_dir}"
fi

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
