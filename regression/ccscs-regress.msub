#!/bin/bash
##---------------------------------------------------------------------------##
## File  : regression/ccscs-regression.sh
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016-2017, Los Alamos National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${subproj} ]]; then
  echo "Fatal Error, subproj not found in environment."
  exit 1
fi
if [[ ! ${regdir} ]]; then
  echo "Fatal Error, regdir not found in environment."
  exit 1
fi
if [[ ! ${rscriptdir} ]]; then
  echo "Fatal Error, rscriptdir not found in environment."
  exit 1
fi
if [[ ! ${build_type} ]]; then
  echo "Fatal Error, build_type not found in environment."
  exit 1
fi
if [[ ! ${logdir} ]]; then
  echo "Fatal Error, logdir not found in environment."
  exit 1
fi

# Environment setup
# ----------------------------------------

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
# ctest submit seems to ignore these no proxy settings, so we must unset the
# above proxy env variables before submitting the results to cdash.
export no_proxy="localhost,127.0.0.1,rtt.lanl.gov,.lanl.gov"
export NO_PROXY=$no_proxy
export VENDOR_DIR=/scratch/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

# import some bash functions
source $rscriptdir/scripts/common.sh

case $REGRESSION_PHASE in
  cbt)
    ctestparts=Configure,Build,Test
    if test "${build_autodoc:-off}" == "on"; then
      ctestparts="${ctestparts},Autodoc"
    fi
    ;;
  s)
    ctestparts=Submit
    # Submitting to CDash requires this
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    ;;
esac

# Header
# ----------------------------------------
machine=`uname -n | sed -e 's/[.].*//g'`
echo "==========================================================================="
echo "CCSCS Regression: ${ctestparts} from ${machine}."
echo "                  ${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}"
echo "==========================================================================="

umask 0002
ulimit -a

# Modules
# ----------------------------------------

if [[ `fn_exists module` == 1 ]]; then
  echo " "
  if [[ `declare -f module | grep -c LMOD` == 0 ]]; then
    # we have tcl modules
    echo "Found Tcl modules:"
    run "module list"
    echo "unloading"
    run "module purge"
    run "module list"
    unset dracomodules
    unset NoModules
    unset _LMFILES_
    unset MODULEPATH
    unset LOADEDMODULES
    unset MODULESHOME

    # If TCL modulefiles, switch to Lmod
    echo " "
    echo "Switching to Lmod modulefiles..."
    export MODULE_HOME=/scratch/vendors/spack.20170502/opt/spack/linux-rhel7-x86_64/gcc-4.8.5/lmod-7.4.8-oytncsoih2sa4jdogz2ojvwly6mwle4n
    source $MODULE_HOME/lmod/lmod/init/bash || die "Can't find /mod/init/bash"
    run "module use /scratch/vendors/spack.20170502/share/spack/lmod/linux-rhel7-x86_64/Core" || die "Can't find Lmod Core modulefiles."

  else
    # we have Lmod modules
    echo "Found Lmod modules:"
    run "module avail"
    run "module list"
    run "module purge"
    run "module list"
  fi
else
  echo " "
  echo "No modules available"
  echo "Loading Lmod modulefiles..."
  export MODULE_HOME=/scratch/vendors/spack.20170502/opt/spack/linux-rhel7-x86_64/gcc-4.8.5/lmod-7.4.8-oytncsoih2sa4jdogz2ojvwly6mwle4n
  source $MODULE_HOME/lmod/lmod/init/bash || die "Can't find /mod/init/bash"
  run "module use /scratch/vendors/spack.20170502/share/spack/lmod/linux-rhel7-x86_64/Core" || die "Can't find Lmod Core modulefiles."
fi

# Establish environment via Lmod...

# eospac, ndi, csk
run "module use --append /scratch/vendors/Modules.lmod"

# Load default set of modules
dm_core="cmake eospac git ndi python graphviz doxygen ccache numdiff"
dm_gcc="gcc/6.3.0 netlib-lapack gsl metis random123 csk qt"
dm_openmpi="openmpi parmetis superlu-dist trilinos"
export dracomodules="$dm_core $dm_gcc $dm_openmpi"

# use bash_functions.sh::add_to_path?
if [ -d $VENDOR_DIR/bin ] && [[ ":${PATH}:" != *":${VENDOR_DIR}/bin:"* ]]; then
  PATH="${PATH:+${PATH}:}${VENDOOR_DIR}/bin"
fi

# Setup for special builds (extra_params)
case $extra_params in
  "")
    run "module load $dracomodules"
    comp=gcc
    ;;
  coverage)
    run "module load $dracomodules"
    comp=gcc
    echo "Coverage option selected."
    if ! [[ "${build_type}" == "Debug" ]]; then
      die "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    fi
    build_type=Coverage
    # Ccache breaks bullseye coverage!!!
    run "module unload ccache"
    run "module load bullseyecoverage"
    CXX=`which g++`
    CC=`which gcc`
    ;;
  clang)
    run "module load $dm_core"
    run "module load llvm netlib-lapack gsl metis random123 csk"
    run "module load $dm_openmpi"
    comp=clang
    ;;
  fulldiagnostics)
    run "module load $dracomodules"
    comp="gcc-fulldiagnostics"
    ;;
  gcc630)
    run "module load $dracomodules"
    comp=gcc-6.3.0
    ;;
  valgrind)
    run "module load $dracomodules valgrind"
    comp=gcc
    echo "Dynamic Analysis (valgrind) option selected."
    if ! [[ "${build_type}" == "Debug" ]]; then
      die "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    fi
    build_type=DynamicAnalysis
    ;;
  *)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
run "module list"

# When run by crontab, use a special ssh-key to allow authentication to gitlab
if test "$USER" == "kellyt"; then
  MYHOSTNAME="`uname -n`"
  keychain=keychain-2.8.2
  $VENDOR_DIR/$keychain/keychain $HOME/.ssh/cmake_dsa $HOME/.ssh/cmake_rsa
  if test -f $HOME/.keychain/$MYHOSTNAME-sh; then
    run "source $HOME/.keychain/$MYHOSTNAME-sh"
  else
    echo "Error: could not find $HOME/.keychain/$MYHOSTNAME-sh"
  fi
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug, Coverage

if [[ ! ${dashboard_type} ]]; then
  dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
  if test "${regress_mode}" = "off"; then
    moniker=`whoami`
    base_dir=/scratch/${moniker}
  else
    base_dir=/scratch/regress/cdash
  fi
  mkdir -p $base_dir
  if ! test -d ${base_dir}; then
    echo "Fatal Error, base_dir=${base_dir} not found in environment."
    exit 1
  fi
fi

echo " "
echo "ccscs-regress.msub: dashboard_type = $dashboard_type"
echo "ccscs-regress.msub: base_dir       = $base_dir"
echo "ccscs-regress.msub: build_type     = $build_type"
echo "ccscs-regress.msub: comp           = $comp"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
  script_dir=${rscriptdir}
  script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
  script_dir=`echo ${rscriptdir} | sed -e 's/draco/jayenne/'`
  script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
  script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%capsaicin/scripts%'`
  script_name=Capsaicin_Linux64.cmake
elif test "${subproj}" == asterisk; then
  script_dir=`echo ${rscriptdir} | sed -e 's/draco/asterisk/'`
  script_name=Asterisk_Linux64.cmake
fi

# Append the username to the build name unless option '-r' is specified.
if [[ "${regress_mode}" = "off" ]]; then
  if [[ ${buildname_append} ]]; then
    export buildname_append="-${USER}${buildname_append}"
  else
    export buildname_append="-${USER}"
  fi
  export work_dir=${base_dir}/cdash/${subproj}/${dashboard_type}_${comp}/${build_type}
  export AUTODOCDIR=$work_dir/autodoc
else
  export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
  if test -d /ccs/codes/radtran/autodoc; then
    export AUTODOCDIR=/ccs/codes/radtran/autodoc
  fi
fi

echo "ccscs-regress.msub: work_dir       = ${work_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then
  if ! test -d ${work_dir}; then
    /usr/bin/install -d ${work_dir}/source
    /usr/bin/install -d ${work_dir}/build
    /usr/bin/install -d ${work_dir}/target
  else
    if test -d ${work_dir}/target/lib; then
      rm -rf ${work_dir}/target/*
    fi
    # empty the autodoc directory to force new build
    if test -d ${word_dir}/build/autodoc; then
      rm -rf ${word_dir}/build/autodoc/*
    fi
    # keep the purger from removing the source files.
    # find ${work_dir}/source/ -exec touch {} \;
  fi
fi

if test "${build_type}" = "Coverage"; then
  # Coverage build imply Debug builds.
  build_type="Debug,${build_type}"
  run "export COVFILE=${work_dir}/build/CMake.cov"
  if [[ -f ${COVFILE} ]]; then
    run "rm -f ${COVFILE}"
  fi
  run "cov01 --on"
fi
if test "${build_type}" = "DynamicAnalysis"; then
  # DynamicAnalysis builds imply Debug builds.
  build_type="Debug,${build_type}"
fi
if test "${bounds_checking:-off}" = "on"; then
  build_type="${build_type},bounds_checking"
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

if test -f "$COVFILE"; then
  run "cp $COVFILE $COVFILE.bak"
fi

if [[ ${regress_mode} == "on" ]]; then
  echo " "
  run "chgrp -R draco ${work_dir}"
  run "chmod -R g+rwX,o-rwX ${work_dir}"
fi

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
