#!/bin/bash -l
##---------------------------------------------------------------------------##
## File  : regression/ccscs-regression.sh
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016, Los Alamos National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${subproj} ]]; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if [[ ! ${regdir} ]]; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if [[ ! ${rscriptdir} ]]; then
   echo "Fatal Error, rscriptdir not found in environment."
   exit 1
fi
if [[ ! ${build_type} ]]; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi
if [[ ! ${logdir} ]]; then
   echo "Fatal Error, logdir not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002
ulimit -a

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
# ctest submit seems to ignore these no proxy settings, so we must unset the
# above proxy env variables before submitting the results to cdash.
export no_proxy="localhost,127.0.0.1,rtt.lanl.gov,.lanl.gov"
export NO_PROXY=$no_proxy
export VENDOR_DIR=/scratch/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

# import some bash functions
source $rscriptdir/scripts/common.sh

case $REGRESSION_PHASE in
cbt)
    ctestparts=Configure,Build,Test
    if test "${build_autodoc:-off}" == "on"; then
      ctestparts="${ctestparts},Autodoc"
    fi
    ;;
s)
    ctestparts=Submit
    # Submitting to CDash requires this
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    ;;
esac

# Header
# ----------------------------------------
machine=`uname -n | sed -e 's/[.].*//g'`
echo "==========================================================================="
echo "CCSCS Regression: ${ctestparts} from ${machine}."
echo "                  ${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}"
echo "==========================================================================="

# Modules
# ----------------------------------------
result=`fn_exists module`
if test $result -eq 0; then
  echo 'module function is defined'
else
  echo 'module function does not exist. defining a local function ...'
  source /usr/share/Modules/init/bash
fi

source /usr/share/Modules/init/bash
run "module purge"
run "module load user_contrib"
run "module load gcc openmpi cmake git"
run "module load dracoscripts subversion random123 valgrind"
run "module load eospac lapack gsl" # grace
run "module load superlu-dist/4.3"
run "module load ndi metis parmetis trilinos"
run "module load doxygen graphviz" # qt
comp=gcc

case $extra_params in
"")
  # no-op
  ;;
coverage)
  # comp=gcc-5.2.0
  echo "Coverage option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  build_type=Coverage
  run "module load bullseyecoverage"
  CXX=`which g++`
  CC=`which gcc`
  ;;
bounds_checking)
  echo "Bounds checking option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  bounds_checking=on
  run "module swap superlu-dist superlu-dist/4.3-bc"
  run "module swap trilinos trilinos/12.8.1-bc"
  run "module swap metis metis/5.1.0-bc"
  run "module swap parmetis parmetis/4.0.3-bc"
  ;;
clang)
  run "module purge"
  run "module load user_contrib"
  run "module load llvm openmpi cmake"
  run "module load dracoscripts subversion random123"
  run "module load lapack gsl" # eospac
  run "module load superlu-dist/4.3"
  run "module load ndi metis parmetis trilinos"
  run "module load graphviz"
  comp=clang
  ;;
fulldiagnostics)
  comp="intel-fulldiagnostics"
  ;;
gcc530)
  run "module purge"
  run "module load user_contrib"
  run "module load gcc/5.3.0 openmpi cmake"
  run "module load dracoscripts subversion random123"
  run "module load lapack gsl eospac"
  run "module load superlu-dist"
  run "module load ndi metis parmetis trilinos"
  comp=gcc-5.3.0
  ;;
gcc610)
    run "module purge"
    run "module load user_contrib"
    run "module load gcc/6.1.0 openmpi cmake"
    run "module load dracoscripts subversion random123"
    run "module load lapack gsl eospac"
    run "module load superlu-dist"
    run "module load ndi metis parmetis trilinos"
    comp=gcc-6.1.0
  ;;
valgrind)
  echo "Dynamic Analysis (valgrind) option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  build_type=DynamicAnalysis
  ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
run "module list"

# Use a unique regression folder for each github branch
if test ${USE_GITHUB:-0} == 1; then
  comp=$comp-$featurebranch
fi

# When run by crontab, use a special ssh-key to allow authentication to gitlab
if test "$USER" == "kellyt"; then
  run "module load git"
  MYHOSTNAME="`uname -n`"
  keychain=keychain-2.8.2
  $VENDOR_DIR/$keychain/keychain $HOME/.ssh/cmake_dsa
  if test -f $HOME/.keychain/$MYHOSTNAME-sh; then
    run "source $HOME/.keychain/$MYHOSTNAME-sh"
  else
    echo "Error: could not find $HOME/.keychain/$MYHOSTNAME-sh"
  fi
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug, Coverage

if [[ ! ${dashboard_type} ]]; then
   dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
   if test "${regress_mode}" = "off"; then
      moniker=`whoami`
      base_dir=/scratch/${moniker}
   else
      base_dir=/scratch/regress/cdash
   fi
   mkdir -p $base_dir
   if ! test -d ${base_dir}; then
      echo "Fatal Error, base_dir=${base_dir} not found in environment."
      exit 1
   fi
fi

echo " "
echo "ccscs-regress.msub: dashboard_type = $dashboard_type"
echo "ccscs-regress.msub: base_dir       = $base_dir"
echo "ccscs-regress.msub: build_type     = $build_type"
echo "ccscs-regress.msub: comp           = $comp"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${rscriptdir}
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=`echo ${rscriptdir} | sed -e 's/draco/jayenne/'`
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%capsaicin/scripts%'`
    script_name=Capsaicin_Linux64.cmake
elif test "${subproj}" == asterisk; then
    script_dir=`echo ${rscriptdir} | sed -e 's/draco/asterisk/'`
    script_name=Asterisk_Linux64.cmake
fi

if test "${regress_mode}" = "off"; then
    export buildname_append="-${USER}"
fi

if test "${regress_mode}" = "off"; then
    export work_dir=${base_dir}/cdash/${subproj}/${dashboard_type}_${comp}/${build_type}
    export buildname_append="-${USER}"
    export AUTODOCDIR=$work_dir/autodoc
else
    export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
fi
echo "ccscs-regress.msub: work_dir       = ${work_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then
   if ! test -d ${work_dir}; then
      /usr/bin/install -d ${work_dir}/source
      /usr/bin/install -d ${work_dir}/build
      /usr/bin/install -d ${work_dir}/target
   else
      if test -d ${work_dir}/target/lib; then
         rm -rf ${work_dir}/target/*
      fi
      # empty the autodoc directory to force new build
      if test -d ${word_dir}/build/autodoc; then
         rm -rf ${word_dir}/build/autodoc/*
      fi
      # keep the purger from removing the source files.
      # find ${work_dir}/source/ -exec touch {} \;
   fi
fi

if test "${build_type}" = "Coverage"; then
   # Coverage build imply Debug builds.
   build_type="Debug,${build_type}"
   run "export COVFILE=${work_dir}/build/CMake.cov"
   if test -f ${COVFILE}; then
      run "rm -f ${COVFILE}"
      cov01 --on
   fi
fi
if test "${build_type}" = "DynamicAnalysis"; then
   # DynamicAnalysis builds imply Debug builds.
   build_type="Debug,${build_type}"
fi
if test "${bounds_checking:-off}" = "on"; then
    build_type="${build_type},bounds_checking"
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

if test -f "$COVFILE"; then
  run "cp $COVFILE $COVFILE.bak"
fi

run "chgrp -R draco ${work_dir}"
run "chmod -R g+rwX,o-rwX ${work_dir}"

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
