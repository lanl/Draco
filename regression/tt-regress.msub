#!/bin/bash
##---------------------------------------------------------------------------##
## File  : regression/tt-regress.msub
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016-2017, Los Alamos National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

# Under cron, a basic environment might not be loaded yet.
if [[ `which srun 2>/dev/null | grep -c srun` == 0 ]]; then
  source /etc/bash.bashrc.local
fi

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${rscriptdir} ]]; then
   echo "Fatal Error, rscriptdir not found in environment."
   exit 1
fi

# import some bash functions
source $rscriptdir/scripts/common.sh


if [[ ! ${subproj} ]]; then
  die "Fatal Error, subproj not found in environment."
fi
if [[ ! ${regdir} ]]; then
  die "Fatal Error, regdir not found in environment."
fi
if [[ ! ${build_type} ]]; then
  die "Fatal Error, build_type not found in environment."
fi
if [[ ! ${logdir} ]]; then
  die "Fatal Error, logdir not found in environment."
fi
if [[ `which srun 2>/dev/null | grep -c srun` == 0 ]]; then
  die "Cannot find srun.  Possibly bad environment or machine issue."
fi

# Environment setup
# ----------------------------------------
umask 0002

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
# ctest submit seems to ignore these no proxy settings, so we must unset the
# above proxy env variables before submitting the results to cdash.
export no_proxy="localhost,127.0.0.1,rtt.lanl.gov,.lanl.gov"
export NO_PROXY=$no_proxy
export VENDOR_DIR=/usr/projects/draco/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

machine=`uname -n`
case $REGRESSION_PHASE in
  cb) ctestparts="Configure,Build" ;;
  t)
    ctestparts="Test"

    # Node type (aprun -n 1 lscpu)
    #partition=`aprun -q -n $PBS_NUM_NODES -N 1 grep -i "model name" /proc/cpuinfo | sort | uniq -c`

    # Force create of a new log file (don't append)
    echo "Purging ${logdir}/tt-${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}-t.log"
    echo "    " > ${logdir}/tt-${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}-t.log
    ;;
  s)
    ctestparts="Submit"
    # Submitting to CDash requires this
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    ;;
  *)
    echo "Fatal Error, REGRESSION_PHASE = \"${REGRESSION_PHASE}\" does not match \"cb\" or \"s\"."
    exit 1
    ;;
esac

# Header
# ----------------------------------------
echo "==========================================================================="
echo "Trinitite regression: ${ctestparts} from ${machine}."
echo "                      ${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}"
echo "==========================================================================="
if [[ ${SLURM_JOB_PARTITION} ]]; then
  echo " "
  echo "Allocation configuration:"
  echo $SLURM_JOB_PARTITION
  echo " "
fi
run "ulimit -a"

# Modules
# ----------------------------------------
if [[ `fn_exists module` == 0 ]]; then
    echo 'module function does not exist. defining a local function ...'
    module ()
    {
      eval `/opt/cray/pe/modules/3.2.10.5/bin/modulecmd bash $*`
    }
fi

run "module load user_contrib friendly-testing"

# Clean up old environment
run "module unload cmake numdiff git"
run "module unload gsl random123 eospac"
run "module unload trilinos ndi"
run "module unload superlu-dist metis parmetis"
run "module unload PrgEnv-intel PrgEnv-pgi PrgEnv-cray"
# Load new environment
run "module load PrgEnv-intel"
run "module unload intel"
run "module load intel/17.0.1"
#run "module swap cray-mpich cray-mpich/7.4.2"
run "module unload cray-libsci gcc/6.1.0"
run "module load craype-hugepages4M"
run "module load cmake/3.7.1 numdiff git"
run "module load gsl/2.1 random123 eospac/6.2.4 ndi"
run "module load trilinos/12.8.1 ndi metis parmetis/4.0.3 superlu-dist/4.3"

export CC=`which cc`
export CXX=`which CC`
export FC=`which ftn`
export CRAYPE_LINK_TYPE=dynamic
export OMP_NUM_THREADS=16
comp=CC

# Extra parameters
case $extra_params in
knl)
    run "module swap craype-haswell craype-mic-knl"
    export OMP_NUM_THREADS=17
    comp="${comp}-knl"
    ;;
"")
    # no-op
    ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system (edit tt-regress.msub)."
    exit 1
    ;;
esac
run "module list"

# Use a unique regression folder for each github branch
comp=$comp-$featurebranch

# When run by crontab, use a special ssh-key to allow authentication to gitlab
if [[ ${regress_mode} == "on" ]]; then
  run "module load git"
  keychain=keychain-2.7.1
  $VENDOR_DIR/$keychain/keychain $HOME/.ssh/cmake_dsa $HOME/.ssh/cmake_rsa
  if test -f $HOME/.keychain/$HOSTNAME-sh; then
    run "source $HOME/.keychain/$HOSTNAME-sh"
  else
    echo "Error: could not find $HOME/.keychain/$HOSTNAME-sh"
  fi
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug

if [[ ! ${dashboard_type} ]]; then
  dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
  if ! test -d ${scratchdir}; then
    echo "Fatal Error, scratchdir=${scratchdir} not found.."
    exit 1
  fi
  scratchdir=$scratchdir/$LOGNAME/cdash/tt
  base_dir=${regdir}/cdash/tt
fi

echo " "
echo "tt-regress.msub: dashboard_type = $dashboard_type"
echo "tt-regress.msub: base_dir       = $base_dir"
echo "tt-regress.msub: build_type     = $build_type"
echo "tt-regress.msub: comp           = $comp"
echo "tt-regress.msub: machine        = $machine"
echo "tt-regress.msub: subproj        = $subproj"
echo "tt-regress.msub: regdir         = $regdir"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${rscriptdir}
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=`echo ${rscriptdir} | sed -e 's/draco/jayenne/'`
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%capsaicin/scripts%'`
    script_name=Capsaicin_Linux64.cmake
fi

if ! [[ "${regress_mode}" == "on" ]]; then
  export buildname_append="-${USER}"
fi

# work_dir and scratch_dir are not the same for regress_mode == on.
export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
export scratch_dir=${scratchdir}/${subproj}/${dashboard_type}_${comp}/${build_type}

echo "tt-regress.msub: work_dir       = ${work_dir}"
echo "tt-regress.msub: scratch_dir    = ${scratch_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then
   if ! test -d ${work_dir}/source; then
      run "mkdir -p ${work_dir}/source"
   fi
   # See notes above where scratch_dir is set concerning why these are soft
   # links.
   if test "${regress_mode}" = "on"; then
     if ! test -d ${scratch_dir}/build; then
       run "mkdir -p ${scratch_dir}/build"
     fi
     if ! test -d ${work_dir}/build; then
       run "ln -s ${scratch_dir}/build ${work_dir}/build"
     fi
     if ! test -d ${scratch_dir}/target; then
       run "mkdir -p ${scratch_dir}/target"
     fi
     if ! test -d ${work_dir}/target; then
       run "ln -s ${scratch_dir}/target ${work_dir}/target"
     fi
   else
     if ! test -d ${work_dir}/build; then
       run "mkdir -p ${work_dir}/build"
     fi
     if ! test -d ${work_dir}/target; then
       run "mkdir -p ${scratch_dir}/target"
     fi
   fi

   # clean the installation directory to remove any files that might no longer
   # be generated.
   if test -d ${work_dir}/target/lib; then
       run "rm -rf ${work_dir}/target/*"
   fi
   if test -f ${work_dir}/build/CMakeCache.txt; then
       run "rm -rf ${work_dir}/build/*"
   fi
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

date
echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
echo " "
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

if [[ ${regress_mode} == "on" ]]; then
  echo " "
  run "chgrp -R draco ${work_dir}"
  run "chmod -R g+rX,o-rwX ${work_dir}"
fi

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
