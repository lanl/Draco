#!/bin/bash -l
##---------------------------------------------------------------------------##
## File  : regression/darwin-regression.sh
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016, Los Alamos National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

#SBATCH -N 1
#SBATCH --time=480
#SBATCH --constraint=haswell
# https://computing.llnl.gov/linux/slurm/sbatch.html

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${subproj} ]]; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if [[ ! ${regdir} ]]; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if [[ ! ${rscriptdir} ]]; then
   echo "Fatal Error, rscriptdir not found in environment."
   exit 1
fi
if [[ ! ${build_type} ]]; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi
if [[ ! ${logdir} ]]; then
   echo "Fatal Error, logdir not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
export VENDOR_DIR=/usr/projects/draco/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

# import some bash functions
source $rscriptdir/scripts/common.sh

case $REGRESSION_PHASE in
cbt) ctestparts=Configure,Build,Test;;
s)
  ctestparts=Submit
  # Submitting to CDash requires this
  unset http_proxy
  unset https_proxy
  unset HTTP_PROXY
  unset HTTPS_PROXY
  ;;
esac

machine=`uname -n`
echo "==========================================================================="
echo "Darwin regression: ${ctestparts} from ${machine}."
echo "                   ${subproj}-${build_type}${epdash}${extra_params}${prdash}${featurebranch}"
echo "==========================================================================="
run "ulimit -a"

# Modules
# ----------------------------------------
# Use modules found in the draco directory
run "module use --append /usr/projects/draco/vendors/Modules"

# Clear any default loaded modules as these are invalid when staring a new shell.
run "module purge &> /dev/null"
run "module load git"
run "module load intel/16.0.3"
run "module load cmake/3.6.0 numdiff/5.8.1 subversion random123 eospac/6.2.4"
run "module load gsl/2.1 ndi metis parmetis superlu-dist trilinos"
run "module list"

# For Intel MPI, we must set these 4 variables:
export CXX=`which mpiicpc`
export CC=`which mpiicc`
export FC=`which mpiifort`
export MPIEXEC=`which mpirun`
# http://stackoverflow.com/questions/11959906/openmp-and-numa-relation
export OMP_NUM_THREADS=`lscpu | grep "per socket" | awk '{print $4}'`
export OMP_PROC_BIND=true
comp=${CXX##*/}
#echo "mpd --daemon"
#mpd --daemon

case $extra_params in
"")
    # no-op
    ;;
cuda)
    run "module load cudatoolkit/5.0"
    comp="intel-cuda"
    ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
run "module list"

# Use a unique regression folder for each github branch
if test ${USE_GITHUB:-0} == 1; then
  comp=$comp-$featurebranch
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug

if [[ ! ${dashboard_type} ]]; then
   dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
  if test "${regress_mode}" = "off"; then
    scratch_dir=$HOME/cdash/darwin
    base_dir=${scratch_dir}
  else
    scratch_dir=/usr/projects/draco/regress/cdash/darwin
    base_dir=/usr/projects/draco/regress/cdash/darwin
  fi
  mkdir -p $scratch_dir
  mkdir -p $base_dir
  if ! test -d ${scratch_dir}; then
    echo "Fatal Error, scratch_dir=${scratch_dir} not found.."
    exit 1
  fi
fi

echo " "
echo "darwin-regress.msub: dashboard_type = $dashboard_type"
echo "darwin-regress.msub: base_dir       = $base_dir"
echo "darwin-regress.msub: build_type     = $build_type"
echo "darwin-regress.msub: comp           = $comp"
echo "darwin-regress.msub: machine        = $machine"
echo "darwin-regress.msub: subproj        = $subproj"
echo "darwin-regress.msub: regdir         = $regdir"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${rscriptdir}
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%jayenne/regression%'`
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%capsaicin/scripts%'`
    script_name=Capsaicin_Linux64.cmake
fi

if test "${regress_mode}" = "off"; then
    export buildname_append="-${USER}"
fi

export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
export scratch_dir=${scratch_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}

echo "darwin-regress.msub: work_dir       = ${work_dir}"
echo "darwin-regress.msub: scratch_dir    = ${scratch_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then
   if ! test -d ${work_dir}/source; then
      run "/usr/bin/install -d ${work_dir}/source"
   fi
   # See notes above where scratch_dir is set concerning why these
   # are soft links.
   if ! test -d ${scratch_dir}/build; then
      run "/usr/bin/install -d ${scratch_dir}/build"
   fi
   if ! test -d ${work_dir}/build; then
      run "ln -s ${scratch_dir}/build ${work_dir}/build"
   fi
   if ! test -d ${scratch_dir}/target; then
      run "/usr/bin/install -d ${scratch_dir}/target"
   fi
   if ! test -d ${work_dir}/target; then
      run "ln -s ${scratch_dir}/target ${work_dir}/target"
   fi

   # clean the installation directory to remove any files that might
   # no longer be generated.
   if test -d ${work_dir}/target/lib; then
       run "rm -rf ${work_dir}/target/*"
   fi
   if test -f ${work_dir}/build/CMakeCache.txt; then
       run "rm -rf ${work_dir}/build/*"
   fi
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

date

echo " "
echo "Proxy Settings:"
printenv | grep -i proxy
echo " "

echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

run "chgrp -R draco ${work_dir}"
run "chmod -R g+rwX,o-rwX ${work_dir}"

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
