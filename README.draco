>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> DRACO Component Libraries for Radiation Transport Codes
>>> CCS-2 Computational Physics Group
>>> Copyright (C) 2016-2017, Los Alamos National Security, LLC.
>>> All rights reserved.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Draco is an object-oriented component library geared towards numerically
intensive, radiation (particle) transport applications built for parallel
computing hardware. It consists of semi-independent packages and a robust build
system. The packages in Draco provide a set of components that can be used by
multiple clients to build transport codes. The build system can also be
extracted for use in clients. Software includes smart pointers,
Design-by-Contract assertions, unit test framework, wrapped MPI functions, a
file parser, unstructured mesh data structures, a random number generator, root
finders and an angular quadrature component.

This code is unclassified and has been assigned LA-CC-16-016. Los Alamos
National Laboratoryâ€™s Export Control Team made an in-house determination that
this software is controlled under Department of Commerce regulations and the
Export Control Classification Number (ECCN) EAR99.

Configuring and Building
=============================

Access the sources

  git clone git@github.com:lanl/Draco.git draco

Build with Makefiles:

  mkdir build_dir && cd $_
  [C_FLAGS='-Werror'] cmake $source_location [-DOPTION=value]
  [ccmake] # check settings
  make [-j] [install|target]
  ctest [-j]

Common options:

  -DCMAKE_BUILD_TYPE=Release|Debug|RelWithDebInfo
  -DBUILD_TESTING=OFF

Common targets:

 - all
 - install
 - Lib_quadrature       # build a library (and any needed deps)
 - Exe_draco_info       # build an executable (and any needed deps)
 - Ut_dsxx_tstSlice_exe # build one unit test (and any needed deps)
 - help
 - clean
 - rebuild_cache
 - autodoc

Developer Environment Configuration
=============================

1. git-hooks:

cd environment/git
./install-hooks.sh $HOME/draco

2. bash environment and modules:

See environment/bashrc/README

3. emacs

See environment/elisp/README.elisp


Active Draco Component Synopsis
=============================

RTT_Format_Reader:{mesh container and services}

c4: {Communications library that wraps MPI}

cdi: {Get access to material data}
The Common Data Interface specifies an common abstraction for objects and
libraries that return material data (opacities, atomic cross sections,
equation-of-state data, etc.)

cdi_analytic: {Analytic models for physical data}

cdi_eospac: {Equation-of-State data}
This class wraps the EOSPAC6 libraries (local copy at
    /ccs/codes/radtran/vendors/eospac).  The interface inherits from CDI/EOS.hh
    and can be used as a stand alone component or as a plug-in to CDI.  To make
    the component available you must set in your environment or in the
    CMakeCache.txt the variable EOSPAC_LIB_DIR to the path to libeospac.a

cdi_ipcress: {Gray and multigroup opacities}
    The classes in this component will read and parse opacity values from an
    IPCRESS file produced by TOPS.  The component presents this data through
    various accessors.  The interface inherits from CDI/Opacity.hh and can be
    used as a stand alone component or as a plug-in to CDI.

device: {Wrapper for heterogeneous device communication}
    The classes in this component provide access to DaCS and CUDA calls for use
    on heterogeneous architecture platforms (Roadrunner or GPU machines).

diagnostics:
CPP macros that are activated at compile time that can provide additional
diagnostic verbosity during calculations.

ds++: {Basic services}
    Array containers, assertion and Design-by-Contract, Ffle system information,
    path manipulation, unit test system, etc.

fit: {Least squares fit}

fpe_trap: {Catch IEEE floating point exceptions}

FortranCheck: {Test Fortran compatibility and interoperability}
The examples in this component will demonstrate if the Fortran compiler is
working; if Fortran/C interlanguage linking/running is working and sample
ISO_C_BINDING calls.

lapack_wrap:
BLAS and LAPACK functionality for C++.

linear: {linear equations}
Routines to solve small systems of linear equations.

meshReaders:
Read RTT format mesh files.

mesh_element:
Provide a description of unstructured mesh. Used by meshReaders and
RTT_Format_Reader.

min: Optimizaiton routines. Find the minimum of a function.

norms: Calculate norms for data sets.

ode: Ordinary differential equation solvers.

parser: Lexical file parser.

plot2d: Generate GNU plot 2-dimensional plots.

quadrature: {Get access to quadrature data}
Provides a creator class to generate quadrature objects.  Quadrature objects
encapsulate discrete ordinates angular differencing methods and data. Also
provide service functions that are commonly used.

rng: {A random number generator component}
The primary set of functions provided by this component were derived from
Random123 (https://www.deshawresearch.com/downloads/download_random123.cgi)
    random number library.  A few additional random number generators are also provided.

roots: Root solvers

shared_lib: Dynamically load/unload shared object libraries via dl load

special_functions: Specialized math functions like factorial and Dirac delta.

timestep: An object-oriented class that encapsulates a time step controller.

traits: A traits class used by viz.

units:
    Provides units standardization for Draco. Contains Units class for
    representing arbitrary systems and converting quantities to SI units.

viz:
Generates Ensight files for data vizualization.
