//--------------------------------------------*-C++-*---------------------------------------------//
// build_system.dcc
// The Draco Build System Documenation
// This file is prepared by doxygen so that it can be part of the CCS-2 development web site as well
// as a written report.
//------------------------------------------------------------------------------------------------//

/*!

\page build_system The Draco Build System
\version LA-UR-03-0000
\author Tom Evans

Draco is a C++ radiation transport component library developed by CCS-2, Los Alamos National
Laboratory. In addition to providing infrastructure for radiation transport code developmfent, Draco
serves as a "model Development Environment (DE)" for code development activities within CCS-2.  Most
CCS-2 code projects are based on the coding standards, idioms, style, organization, and architecture
of Draco.  In this vein, an important service that Draco provides is its configure/make system,
forwith referred to as the Draco Build System (DBS).

Utilization of a common build system provides two primary benefits:

\arg code infrastructure maintainence is leveraged
\arg porting to new systems is leveraged.

The Draco build system has the following highlighted features:

\arg built using CMake/Make
\arg Support for most modern C/C++/Fortran compilers.
\arg a well-defined C++ template instantiation model
\arg extensible vendor support for <a href="http://www.mcs.anl.gov/mpi/index.html"
     target="external">MPI</a>,
     <a href="http://www.netlib.org" target="external"> LAPACK and BLAS, MKL, OpenBlas</a>,
     <a href="http://laurel.lanl.gov/PROJECTS/DATA/eos/eos.shtml" target="external">EOSPAC</a>, and
     <a href="http://www-users.cs.umn.edu/~karypis/metis/parmetis/" target="external">ParMetis</a>.
\arg parallel builds
\arg target-source architecture that protects source integrity and allows multiple configurations
     from the same source
\arg automated unit-testing framework
\arg DBS is exportable and extensible
\arg integrated with a set of elisp macros (for emacs, xemacs) that allows automated package
     inclusion and promotes the use of a common coding style

Currently, the Draco Build System is supported on the following systems/operating systems:

- Linux (x86_64-based platforms)
- Windows (x86_64)
- OSX
- IBM (Power9)
- ARM
- Nvidia GPUs

The DBS has been tested and verified on these systems.

New systems will be added as required by the Draco development and user community.

\par Note on semantics

We use \e package to refer to the components sitting in Draco.  Thus, each directory in draco/src is
a package.  Examples are \c ds++ , \c c4, \c quadrature , etc. This usage is historical.  We realize
that the word \e de \e jour in LANL software circles is \e component.  Certainly, Draco is a
component library, and its constituent packages could be called components.  However, the DBS uses
the term package to refer to code components sitting in draco/src, and that is the convention that
will be used here.

<!---------------------------------------------------------------------------->

\section access2src Access to the Source Code

Needs updated content.

<!---------------------------------------------------------------------------->

\section access2release Access to Released versions of Draco

The collection of Draco libraries, header files, applications, unit tests and documentation is
periodically installed on various machines at LANL.  These \e released versions of Draco can be
found at the following locations.

Information concerning released versions of Draco is also published on the <a
href="http://github.com/lanl/draco" target="external">Draco GitHub website</a>.  At this web site
you will also find discussion forums, mailing list archives, and other related documents.

<!---------------------------------------------------------------------------->

\section build Configuring and Building Draco

The Draco Build System is based on CMake and MAKE (or project based IDE's like Visual Studio).

The basic steps to build Draco are the following:
-# obtain source code from the git repository
-# create a binary directory
-# run cmake in binary directory
-# run make in binary directory
.
The following sections will show how to configure and build Draco using the DBS.  For beginners, the
easiest way to start may be to peruse the examples section, \ref ex_builds.

\subsection configure Configuring Draco

The first step in the configure/make process is to build a binary directory.  The source directory
can be used as the binary directory; however, this prevents multiple configurations.  The best
method is to generate a separate binary directory, which allows the user to generate multiple
configurations from the same source. Additionally, creating a disjoint binary directory preserves
the sanctity of the source.  For demonstration purposes, \c $DRACO refers to the Draco source
directory and \c $BUILD refers to the binary directory; thus (> is the command prompt)

\verbatim
  > mkdir $BUILD
\endverbatim

Next, we need to choose an install location ($INSTALL).  After building the $INSTALL location will
have the following sub-directories:
- $INSTALL/bin : installed executables
- $INSTALL/lib : installed libraries
- $INSTALL/include : installed headers

The \c $BUILD and \c $INSTALL directories can be located anywhere (constrained by permission).  For
example, we have found it useful to define a install/target tree such as \c $PATH/debug/build or \c
$PATH/opt/build where \c $PATH/opt or \c $PATH/debug is the \c $INSTALL directory and \c
$PATH/debug/build or \c $PATH/opt/build is the \c $BUILD directory.  The \c $BUILD and \c $INSTALL
directories can be colocated.

Continuing, the basic configure step, in the absence of packages that require vendors or other
options, is
\verbatim
  > cd $BUILD
  > cmake -DCMAKE_INSTALL_PREFIX=$INSTALL $DRACO
\endverbatim
This configure step will build a mirror of the Draco directory source tree in $BUILD. All package
directories inside of the $DRACO/src directory are configured.  After configuration the following
directories (with build system files inside them) will exist in $BUILD:
- $BUILD/src
- $BUILD/tools
- $BUILD/autodoc
.
Only directories that exist in the $DRACO source tree will be found in the $BUILD directory tree.
For example, if the source version of Draco does not have autodoc then there will be no
$BUILD/autodoc directory.

Obviously, there are many options that dictate how Draco is built.  We reserve this discussion for
the section titled \ref config_options.  Additionally, many Draco packages require vendors whose
paths may need to be specified at configure time.  See section draco_pkgs for details on the Draco
package tree and required vendors.

\subsection make_draco Compiling and Installing Draco

Having configured Draco, compiling and installing is straightforward
\verbatim
  > cd $BUILD
  > make -j 40 -l 40
\endverbatim

MAKE runs different targets depending upon the the directory level at which it is run.  Running MAKE
under $BUILD will only build targets in the $BUILD directory.  You must run 'make install' to
install these targets (with updated RPATHS) to the $INSTALL location. After this make is run the
following directories will exist:

- $INSTALL/bin : installed executables
- $INSTALL/lib : installed libraries
- $INSTALL/include : installed headers
- $INSTALL/cmake : build system tools
- $INSTALL/autodoc : doxygenated documents (optional)
.

The \e pkg subdirectories are entered in the appropriate order automatically (this order is actually
specified in \c draco/src/CMakeLists.txt) as a hint of inter-package dependencies.  CMake tracks all
dependencies internally and will automaticall build all necessary targets in parallel.

Running MAKE in the subdirectories does a build (compile) of the package directory's principle
targets.

The targets for each package directory in Draco are
- an executable
- a library
- headers
- a custom target
- one or more of the above
.
The targets are determined by the package \c CMakeLists.txt file.  Generating this file is the
subject of \ref pkg.  By default the executable will be the package name.  The library will have the
name \c lib${LIB_PREFIX}package.  The \c LIB_PREFIX variable can be set at configure time, see \ref
config_options.  By default \c LIB_PREFIX is set to \c rtt_. For example, the \c ds++ package will
produce a library called \c librtt_ds++.a(so).  As described above, libraries are installed in
$INSTALL/lib, headers in $INSTALL/include/pkg, and executables in $INSTALL/bin.  Draco libraries
have a custom prefix to prevent name clashes between system libraries and Draco libraries.

The DBS supports several standard MAKE targets:

Two items should be noted from this table.  First, doxygen documentation is not generated by
default.  One must run \c make \c autodoc from $BUILD.  Second, the unit tests are run using the \c
ctest command.  Unit tests can be run recursively from any directory level.  For example, to run
every package's unit tests run \c ctest from $BUILD.  To run the \c c4 package unit tests
run \c ctest from $BUILD/src/c4 or $BUILD/src/c4/test.  \c ctest also supports regex selection of
targets to run and parallel execution options.  More detail is given on the unit
testing support in \ref arch.

In each directory MAKE is run recursively.  For example, running \c make inside of $BUILD/src will
do a compile in each $BUILD/src subdirectory.  However, it will not install the targets unless \c
make \c install is executed.

\subsection draco_pkgs Draco Packages and Vendors

Draco packages co-exist according the the principles of Levelized Software Design (Lakos, J. \e
Large-scale \e C++ \e software \e design. 1996).  The current hierarchy of Draco packages is as
follows can be displayed in doxygen autodoc:

-# Visit the documentation for Assert.hh.
-# In the horizontal toolbar above the file documentation, select the 'src' level.
.
This should provide an diagram similar to the following

\image html draco_package_level_diagram.jpg "Draco Package Level Diagram"

The Draco levelized architecture has significance for clients.  Clients wishing to use a high-level
package must also include all of its dependencies in the proper order.  For example, a client
wishing to utilize services in the \c quadrature package must include the following libraries
(packages) at link time:

\code
  -lrtt_mesh_element -lrtt_parser -lrtt_special_functions -lrtt_roots -lrtt_units -lgsl ...
\endcode

Notice that \c quadrature depends on \c roots through its association with the \c spaecial_functions
package.  Likewise, a Draco package utilizing \c quadrature will have these additional packages as
dependencies, whether it utilizes them directly or not.

As mentioned before, some Draco packages also rely on external vendors. The vendor dependency can be
optional or required.  For example, \c c4 uses MPI; however, it can be compiled in a serial mode
that does not require MPI.  On the other hand, \c rng requires the Random123 header-only vendor to
be used in an application.  The following table lists the Draco packages that have external vendor
requirements:

To use and test a package that requires a vendor, the vendor libraries must be included at link
time.  Some packages (\c cdi_ndi for instance) will not build at all if the vendor is not specified
during the Draco build.  Section \ref config_options shows how to tell Draco where vendor libraries
and include files are located.

External clients must remember to include vendor libraries when loading Draco libraries.  Returning
to the \c quadrature package example, the \c rng package uses Random123 and the \c c4 package may
use MPI; thus, the total link line should be:

\verbatim
  -lrtt_quadrature -lrtt_viz -lrtt_meshReaders -lrtt_rng -lrtt_c4 -lrtt_ds++ -lmpi -lgsl -lgsl_cblas
\endverbatim

where \c libgsl.a(so) is the GSL library.  The DBS automatically includes these vendor libraries;
thus, if the Draco DBS is imported into client applications these dependencies will be taken care of
automatically.  See section import for details.

\par Note on the c4 package

The Draco parallel communication package, \c c4 (<code>namespace rtt_c4</code>), can be built serial
or parallel as described in \ref config_options.  The inclusion of \c c4 services into a package
makes the package \e parallel.  Thus, running tests or applications with packages that depend on \c
c4 will require the use of \c mpirun or whatever system-dependent machinations are required to run a
parallel executable.  The DBS automatically uses parallel execution semantics on packages that
depend on \c c4

\subsection config_options Configure Options

The DBS provides multiple configure options that can be used to tailor the resulting build process.
For convenience we divide these options into three general categories: build options, vendor
options, and Draco vendor options.  The Draco vendor options are only required when importing the
DBS into a client; thus, discussion of these configure options is deferred until section import.
Additionally, all of the standard configure options exist although not all of them have meaning in
the DBS.  To get a list of configure options run \c cmake with the option \c -i.

\verbatim
  > cmake -i $DRACO
\endverbatim
This command queries the user for a list of options with descriptions.  After an initial
configuration, <code>ccmake .</code> can be used as an interactive tool for modifying variables that
control the build.

\anchor dbc The \c ds++ package contains a Design-by-Contract implementation in Assert.hh.  The
compile level of Design-by-Contract is controlled by the \c --with-dbc configure option.  The
following settings apply

The default DBC setting is \c 7.  This makes all DBC tests active.

\anchor config_compiler The \c CXX=<filepath> environment variable specifies the C++ compiler that
will be used by the DBS.  The choice of compiler overrides any system defaults.  The system defaults
are:

Finally, there is another set of configure options that allow additional values to be added to
Makefile flags.  These options are:

These flags are used as a stopgap measure on new or unpredictable systems.  In general, only Draco
developers and architects will use these options.  See system for more details on Makefile variables
in the DBS. These flags may also be used for specialized compiles (e.g.: profiling, coverage
analysis, etc.).

As \anchor no_option described in draco_pkgs, many Draco packages have external vendor requirements.
If configure is not given any options, Draco will look for vendors in default compiler/linker
locations and the \c LD_LIBRARY_PATH.  These usually are \c /usr/lib, \c /lib, etc.  If the vendor
libraries and includes exist in a non-common location, by which we mean a space that the
compiler/linker will not find by default, then configure must be told the location of the vendor
libraries and/or include files.

The general pattern for most vendor options is appending their PREFIX location to \c
CMAKE_PREFIX_PATH.

Of course not all vendors have include or library locations.  Additionally, specifying an include or
library path will override any default search paths or locations specfied by \c LD_LIBRARY_PATH.

The following tables summarize the vendor options supported by Draco:

\par Note on ASCI machines

The LANL ASCI machines utilize modules to define many packages.  The modules will place necessary
include/library files into common locations or a defined \c LD_LIBRARY_PATH.  Thus, it is (usually)
not necessary to specify the following options on ASCI machines if the appropriate modules are
loaded.

\subsection ex_builds Example Builds

\par Example 1

Configure and build all of Draco on the CCS-2 LINUX network. We have set the following:

\verbatim
module load gcc openmpi gsl python cmake
\endverbatim

We wish to install Draco in $HOME/draco-debug.  The Draco source is checked out in $HOME/draco.  Use
openblas for BLAS/LAPACK. Here are the steps:

\verbatim
  > module load gcc openmpi cblas eospac
  > cd $HOME/draco-debug
  > mkdir draco
  > cd draco
  > cmake -DCMAKE_INSTALL_PREFIX=$HOME/draco-debug -DDRACO_C4=MPI ../../draco/configure
  > make -j -l 20 install
\endverbatim

In this example, we have assumed that the developer is logged into a worker node and that
appropriate modules have been loaded.

This will build Draco using two processors. Now assume that we wish to test the entire distribution:

\verbatim
  > cd $HOME/draco-debug/draco
  > ctest -j 20 --test-load 20 --output-on-failure
\endverbatim

\par Example 2

A client wishes to use the \c cdi_ndi package on CTS-1.  We will compile an optimized version of
Draco for this exercise using the Intel compiler.  Draco has been checked out into \c
/scratch/$USER/draco.  The following packages sit under \c /scratch/$USER/draco/src:

\verbatim
  ds++/ cdi/ cdi_ndi/
\endverbatim

We will install Draco in /scratch/$USER/draco-cdi.  Here are the steps:

\verbatim
  > module load intel openmpi ndi
  > cd /scratch/$USER/draco-cdi
  > mkdir draco
  > cd draco
  > cmake -DCMAKE_INSTALL_PREFIX=/scratch/$USER/draco-cdi
    -DCMAKE_BUILD_TYPE=Release -DDBC_LEVEL=0
  ../../draco/configure
  > make -j -l 20 install
  > cd draco/src/cdi_ndi
  > ctest -j 20
\endverbatim

At the end of this configure/build we have checked the \c cdi_ndi package explicitly.  Instead,
assume we wished to manually run the \c tstNDI_CP_Eloss unit test:

\verbatim
  > cd /scratch/$USER/draco-cdi/draco
  > make -j 20 Ut_cdi_ndi_tstNDI_CP_Eloss_exe
  > ctest -VV -R cdi_ndi_tstNDI_CP_Eloss
  or
  > src/cdi_ndi/test/tstNDI_CP_Eloss
\endverbatim

<!---------------------------------------------------------------------------->

\section arch Build System Architecture

The Draco Build System is a CMake-based build system. It supports the following generators:
- Makefiles on Linux
- Visual Studio 2019
- NMake Makefiles
.

<!---------------------------------------------------------------------------->

\section pkg Adding a Package to Draco

New packages are easily added to Draco through the build system.

<!---------------------------------------------------------------------------->

\section import Importing the Draco Build System

The Draco Build System is designed to be imported into other codes.

<!---------------------------------------------------------------------------->

\section faq Frequenty Asked Questions

<!---------------------------------------------------------------------------->

\section system Draco Build System Reference Manual.

*/

//------------------------------------------------------------------------------------------------//
// end of build_system.dcc
//------------------------------------------------------------------------------------------------//
